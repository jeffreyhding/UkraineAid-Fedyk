---
title: "DOD-Javelin"
format: html
---

```{r}
library(tidyverse)
```

```{r}
usaspending_javelin <- read_csv("Contracts_PrimeTransactions_2025-02-22_H00M53S37_1.csv")

fpds_javelin <- read_csv("Javelin_fpds.csv")
fpds_javelin <- fpds_javelin |>
  mutate(`Date Signed` = as_date(format(parse_date(`Date Signed`, format = "%b %d, %Y"), "%Y-%m-%d"), format = "%Y-%m-%d"),
         `Action Obligation ($)` = str_replace_all(`Action Obligation ($)`, "\\$|,", "") |>
           as.numeric())
```

```{r}
calculate_fiscal_year <- function(date) {
  fiscal_year <- if_else(
    month(date) >= 10, 
    year(date) + 1,
    year(date)      
  )
  return(fiscal_year)
}
```

# used data at bottom

# fpds.gov data
```{r}
fpds_javelin_clean <- fpds_javelin |>
  mutate(`Fiscal Year` = calculate_fiscal_year(`Date Signed`)) |>
  filter(`Action Obligation ($)` != 0) |>
  arrange(`Date Signed`)
fpds_javelin_clean
```

```{r}
fpds_javelin_production <- fpds_javelin_clean |>
  group_by(year = `Fiscal Year`) |>
  summarize("total_expenditure" = sum(`Action Obligation ($)`)) |>
  mutate("CPI_inflator_2024" = c(2.12, 2.06, 2, 1.96, 1.93, 1.89, 1.83, 1.78, 1.75, 1.71, 1.52, 1.46, 1.47, 1.44, 
                                 1.4, 1.37, 1.35, 1.33, 1.33, 1.31, 1.28, 1.25, 1.23, 1.21, 1.16, 1.07, 1.03),
         "expenditure_inflation_adjusted" = CPI_inflator_2024 * total_expenditure,
         "num_javelin_produced" = floor(expenditure_inflation_adjusted / 368000))
fpds_javelin_production
```

```{r}
sum(fpds_javelin_production$num_javelin_produced)
sum(fpds_javelin_production$num_javelin_produced[12:27])
```



# usaspending.gov data

```{r}
javelin_clean <- javelin |> 
  select(3, 10, 23:25, 51, 96:97, 46, 87, 95, 99, 105, 111, 117, 125, 295:297) |>
  filter(federal_action_obligation != 0,
         foreign_funding_description != "FOREIGN FUNDS FMS",
         place_of_manufacture != "NOT A MANUFACTURED END PRODUCT" | is.na(place_of_manufacture),
         !str_detect(transaction_description, "FMS|SOFTWARE|ENGINEERING|SERVICES|PURPOSE")) |>
  arrange(desc(federal_action_obligation))

javelin_clean
```

```{r}
javelin_production <- javelin_clean |>
  group_by(action_date_fiscal_year) |>
  summarize("total_expenditure" = sum(federal_action_obligation)) |>
  mutate("CPI_inflator_2024" = c(1.46, 1.47, 1.44, 1.4, 1.37, 1.35, 1.33, 1.33, 1.31, 1.28, 1.25, 1.23, 1.21, 1.16, 1.07, 1.03, 1),
         "expenditure_inflation_adjusted" = CPI_inflator_2024 * total_expenditure,
         "num_javelin_produced" = floor(expenditure_inflation_adjusted / 368000),
         "num_delivered_from_year" = c(num_javelin_produced[1:13], 10000 - sum(num_javelin_produced[1:13]), rep(0, 3)),
         "unit_depreciated_value" = 368000 - (2022 - action_date_fiscal_year) * (368000 / 20),
         "total_depreciated_value" = num_javelin_produced * unit_depreciated_value) |>
  rename(year = action_date_fiscal_year)
javelin_production
```

```{r}
sum(javelin_production$num_javelin_produced)
sum(javelin_production$num_javelin_produced[1:13])
sum(javelin_production$num_delivered_from_year)
sum(javelin_production$num_delivered_from_year * javelin_production$unit_depreciated_value)
```


# merged data
```{r}
temp1 <- fpds_javelin_clean |>
  group_by("year" = `Fiscal Year`) |>
  summarize("total_expenditure" = sum(`Action Obligation ($)`))

temp2 <- javelin_clean |>
  group_by(year = action_date_fiscal_year) |>
  filter(!(award_id_piid %in% fpds_javelin$`Contract ID`)) |>
  summarize("total_expenditure" = sum(federal_action_obligation))

full_javelin_production <- full_join(temp1, temp2, by="year") |>
  rowwise() |>
  mutate(total_expenditure = sum(c_across(matches("total_expenditure")), na.rm = TRUE)) |>
  ungroup() |>
  select(-ends_with(".x"), -ends_with(".y")) |>
  arrange(year) |>
  mutate("CPI_inflator_2024" = c(2.12, 2.06, 2, 1.96, 1.93, 1.89, 1.71, 1.66, 1.61, 1.56, 1.52, 1.46, 1.47, 1.44, 
                                 1.4, 1.37, 1.35, 1.33, 1.33, 1.31, 1.28, 1.25, 1.23, 1.21, 1.16, 1.07, 1.03, 1),
         "expenditure_inflation_adjusted" = CPI_inflator_2024 * total_expenditure,
         "num_javelin_produced" = floor(expenditure_inflation_adjusted / 335000),
         "num_expended_units" = c(num_javelin_produced[1:4],
                                5000 - sum(num_javelin_produced[1:4]), 
                                rep(0, 23)),
         "num_delivered_from_year" = c((num_javelin_produced - num_expended_units)[1:13],
                                       10000 - sum((num_javelin_produced - num_expended_units)[1:13]),
                                       rep(0, 14)),
         "unit_depreciated_value" = pmax(335000 - (2022 - year) * (335000 / 20), 0),
         "non_inflation_adjusted_depreciated_value" = pmax(330000 - (2022 - year) * (333000 / 20), 0),
         "pre_data_stockpiles_est" = c(-5000, rep(0, 27)))


full_javelin_production
```

```{r}
cat("Number of Javelin anti-armor systems produced:", 
    formatC(
         sum(full_javelin_production$num_javelin_produced),
         format = "f", big.mark = ",", digits = 0
       ), 
    "\n")

cat("Number of Javelin anti-armor systems expended by November 2021:", 
    formatC(
         sum(full_javelin_production$num_expended_units),
         format = "f", big.mark = ",", digits = 0
       ),
    "\n")

cat("Number of Javelin anti-armor systems delivered to Ukraine:", 
    formatC(
         sum(full_javelin_production$num_delivered_from_year),
         format = "f", big.mark = ",", digits = 0
       ),
    "\n")

cat(paste0("Total depreciated value delivered to Ukraine (inflation adjusted): $", 
       formatC(
         round(sum(full_javelin_production$num_delivered_from_year * full_javelin_production$unit_depreciated_value)), 
         format = "f", big.mark=",", digits = 2
       )),
    "\n")

cat(paste0("Total depreciated value delivered to Ukraine (non-adjusted): $", 
       formatC(
         round(sum(full_javelin_production$num_delivered_from_year * full_javelin_production$non_inflation_adjusted_depreciated_value)), 
         format = "f", big.mark=",", digits = 2
       )))
```


# misc calculations

```{r}
# FY2023-2025 contract values / number of units to estimate price
(1132400000 + 254400000 + 387700000) / (3728 + 632 + 1053)

(1.03 * 1132400000 + 254400000 + 387700000) / (3728 + 632 + 1053) # inflation adjusted FY2023 contract
```

```{r}
# DACIS contract values separating tube and CLU costs
tibble("Year" = c("Prior Years", seq(2019, 2021)),
       "Javelin (AAWS-M)" = c(5110934000 / 31400, 222985000 / 1112, 142794000 / 697, 165355000 / 763),
       "Javelin Lightweight CLU" = c(NA, 22500000 / 135, NA, 24970000 / 10),
       "Total Contract Per-Unit Cost" = c(5110934000 / 31400, 245485000 / 1247, 142794000 / 697, 190325000 / 773))
```

